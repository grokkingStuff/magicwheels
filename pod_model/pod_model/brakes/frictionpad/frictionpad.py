"""Module that models the Friction Pad"""

from openmdao.api import Group  # pylint: disable=import-error
from pod_model.brakes.frictionpad.brakeforce import BrakeForce
from pod_model.brakes.frictionpad.frictioncoefficient import \
    FrictionCoefficient
from pod_model.brakes.frictionpad.heatconduction import HeatConduction
from pod_model.brakes.frictionpad.heatconvective import HeatConvective
from pod_model.brakes.frictionpad.heatgeneration import HeatGeneration
from pod_model.brakes.frictionpad.temperaturechange import TemperatureChange


class FrictionPad(Group): # pylint: disable=too-few-public-methods
    """
    Models the brake force generated by the friction pad

    Inputs
        mu.SurfaceVelocity
        brakeForce.NormalForce
        heatConvective.AreaBrakePad
        heatConvective.TemperatureSurrounding
        heatConduction.AreaContact
        heatConduction.TemperatureContact
        temperatureChange.Mass

    Outputs:
        brakeForce.FrictionForce
        heatGeneration.HeatRateTrack
    """

    def setup(self):
        """Add subsystems and prmoted inputs and outputs"""

        self.add_subsystem('mu', FrictionCoefficient(),
                           promotes='SurfaceVelocity')

        self.add_subsystem('heatConduction',
                           HeatConduction(),
                           promotes=['AreaContact', 'TemperatureContact'])
        self.add_subsystem('heatConvective',
                           HeatConvective(),
                           promotes=['AreaBrakePad', 'TemperatureSurrounding'])
        self.add_subsystem('heatGeneration',
                           HeatGeneration(),
                           promotes=['HeatRateTrack'])
        self.add_subsystem('brakeForce',
                           BrakeForce(),
                           promotes=['NormalForce', 'FrictionForce'])
        self.add_subsystem('temperatureChange',
                           TemperatureChange(),
                           promotes=['Mass'])

        # Internal Connections
        self.connect('mu.FrictionCoefficient',
                     'brakeForce.FrictionCoefficient')

        self.connect('brakeForce.FrictionForce', 'heatGeneration.BrakingForce')

        self.connect('heatGeneration.HeatRatePad',
                     'temperatureChange.HeatGenerated')
        self.connect('heatConduction.HeatRate',
                     'temperatureChange.HeatConduction')
        self.connect('heatConvective.HeatRate',
                     'temperatureChange.HeatConvection')

        self.connect('temperatureChange.NewTemperature',
                     ['mu.Temperature',
                      'heatConduction.TemperatureBrakePad',
                      'heatConvective.TemperatureBrakePad',
                      'temperatureChange.Temperature'
                     ])
