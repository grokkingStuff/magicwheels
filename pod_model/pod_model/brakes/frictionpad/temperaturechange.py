"""Module that calculates the temperature change"""

import numpy as np  # pylint: disable=import-error
from openmdao.api import ExplicitComponent  # pylint: disable=import-error


class TemperatureChange(ExplicitComponent):
    """Class to measure the temperature change in the brake pads"""

    def initialize(self):
        """Declare options"""
        self.options.declare('HeatCapacity',
                             default=1.0,
                             types=np.ScalarType,
                             desc="Heat Capacity of the Friction Brakes")

    def setup(self):
        """Declare inputs and outputs"""
        self.add_input('Temperature',
                       1.,
                       desc="Temperature of the friction pad.")
        self.add_input('Mass',
                       1.,
                       desc="Mass of the friction pad.")
        self.add_input('HeatConduction',
                       1.,
                       desc="Heat lost due to conduction")
        self.add_input('HeatConvection',
                       1.,
                       desc="Heat lost due to convection")
        self.add_input('HeatGenerated',
                       1.,
                       desc="Heat created due to friction")
        self.add_output('NewTemperature',
                        0.45,
                        desc="Friction Force generated by the friction pad")
        self.add_output('FrictionCoefficient',
                        0.45,
                        desc="Friction Coefficient of the friction pad")

    def compute(self, inputs, outputs):
        """Compute outputs"""
        mass = inputs["Mass"]
        temperature = inputs["Temperature"]
        heat_capacity = self.options["HeatCapacity"]

        time_step = 0.01

        heat_convection = inputs["HeatConvection"]
        heat_conduction = inputs["HeatConduction"]
        heat_generated = inputs["HeatGenerated"]

        if heat_convection > 0:
            heat_convection *= -1
        if heat_conduction > 0:
            heat_conduction *= -1
        if heat_generated < 0:
            heat_generated *= -1
        heat_rate = heat_convection + heat_conduction + heat_generated
        change_in_temperature = heat_rate/(mass*heat_capacity)*time_step

        temperature += change_in_temperature
        outputs["NewTemperature"] = temperature
